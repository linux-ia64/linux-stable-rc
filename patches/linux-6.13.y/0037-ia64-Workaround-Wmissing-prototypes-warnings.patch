From be0f65140b5956ecca956c0970da97e2ecc3ed37 Mon Sep 17 00:00:00 2001
From: Johnny Mnemonic <jm@machine-hall.org>
Date: Mon, 21 Oct 2024 11:51:37 +0200
Subject: [PATCH 37/53] ia64: Workaround -Wmissing-prototypes warnings

Workaround the -Wmissing-prototypes warnings by declaring them locally
similar to what was done in:

* 49ff7d871242d7fd8adb8a2d8347c5d94dda808b
* 736e30af583fb6e0e2b8211b894ff99dea0f1ee7
* 8d0d37cfb8039939f51dd2a1da98aff3b50a4e84
* 3d013424de1efc2c9e68c6c06e76159e467c7ba8
---
 arch/ia64/kernel/acpi.c        |  3 +++
 arch/ia64/kernel/asm-offsets.c |  3 +++
 arch/ia64/kernel/efi.c         |  3 +++
 arch/ia64/kernel/elfcore.c     |  5 +++++
 arch/ia64/kernel/iosapic.c     |  3 +++
 arch/ia64/kernel/irq.c         |  3 +++
 arch/ia64/kernel/irq_ia64.c    | 11 +++++++++++
 arch/ia64/kernel/kprobes.c     |  3 +++
 arch/ia64/kernel/mca.c         | 14 ++++++++++++++
 arch/ia64/kernel/mca_drv.c     |  7 +++++++
 arch/ia64/kernel/module.c      |  3 +++
 arch/ia64/kernel/process.c     | 12 ++++++++++++
 arch/ia64/kernel/ptrace.c      |  9 +++++++++
 arch/ia64/kernel/salinfo.c     |  3 +++
 arch/ia64/kernel/signal.c      |  3 +++
 arch/ia64/kernel/smpboot.c     | 11 +++++++++++
 arch/ia64/kernel/sys_ia64.c    | 12 ++++++++++++
 arch/ia64/kernel/time.c        |  2 ++
 arch/ia64/kernel/traps.c       | 16 ++++++++++++++++
 arch/ia64/kernel/unaligned.c   |  3 +++
 arch/ia64/kernel/unwind.c      |  3 +++
 arch/ia64/lib/checksum.c       | 12 ++++++++++++
 arch/ia64/mm/discontig.c       |  4 ++++
 arch/ia64/mm/extable.c         |  3 +++
 arch/ia64/mm/fault.c           |  3 +++
 arch/ia64/mm/hugetlbpage.c     |  4 ++++
 arch/ia64/mm/init.c            |  6 ++++++
 arch/ia64/mm/tlb.c             |  3 +++
 arch/ia64/pci/pci.c            |  3 +++
 29 files changed, 170 insertions(+)

diff --git a/arch/ia64/kernel/acpi.c b/arch/ia64/kernel/acpi.c
index 41e8fe55cd98..20e13d0c5627 100644
--- a/arch/ia64/kernel/acpi.c
+++ b/arch/ia64/kernel/acpi.c
@@ -908,6 +908,9 @@ EXPORT_SYMBOL(acpi_unregister_ioapic);
  */
 int acpi_suspend_lowlevel(void) { return 0; }
 
+/* workaround for a warning with -Wmissing-prototypes */
+void acpi_proc_quirk_mwait_check(void);
+
 void acpi_proc_quirk_mwait_check(void)
 {
 }
diff --git a/arch/ia64/kernel/asm-offsets.c b/arch/ia64/kernel/asm-offsets.c
index be3b90fef2e9..3f7bc930a62e 100644
--- a/arch/ia64/kernel/asm-offsets.c
+++ b/arch/ia64/kernel/asm-offsets.c
@@ -20,6 +20,9 @@
 #include "../kernel/sigframe.h"
 #include "../kernel/fsyscall_gtod_data.h"
 
+/* workaround for a warning with -Wmissing-prototypes */
+void foo(void);
+
 void foo(void)
 {
 	DEFINE(IA64_TASK_SIZE, sizeof (struct task_struct));
diff --git a/arch/ia64/kernel/efi.c b/arch/ia64/kernel/efi.c
index 033f5aead88a..b52d4865c3cb 100644
--- a/arch/ia64/kernel/efi.c
+++ b/arch/ia64/kernel/efi.c
@@ -962,6 +962,9 @@ efi_uart_console_only(void)
 	return 0;
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+struct kern_memdesc * find_memmap_space (void);
+
 /*
  * Look for the first granule aligned memory descriptor memory
  * that is big enough to hold EFI memory map. Make sure this
diff --git a/arch/ia64/kernel/elfcore.c b/arch/ia64/kernel/elfcore.c
index 8895df121540..b32fa1821b36 100644
--- a/arch/ia64/kernel/elfcore.c
+++ b/arch/ia64/kernel/elfcore.c
@@ -6,6 +6,11 @@
 
 #include <asm/elf.h>
 
+/* workaround for a warning with -Wmissing-prototypes */
+Elf64_Half elf_core_extra_phdrs(struct coredump_params *cprm);
+int elf_core_write_extra_phdrs(struct coredump_params *cprm, loff_t offset);
+int elf_core_write_extra_data(struct coredump_params *cprm);
+size_t elf_core_extra_data_size(struct coredump_params *cprm);
 
 Elf64_Half elf_core_extra_phdrs(struct coredump_params *cprm)
 {
diff --git a/arch/ia64/kernel/iosapic.c b/arch/ia64/kernel/iosapic.c
index 99300850abc1..f37e4402c635 100644
--- a/arch/ia64/kernel/iosapic.c
+++ b/arch/ia64/kernel/iosapic.c
@@ -261,6 +261,9 @@ iosapic_nop (struct irq_data *data)
 
 
 #ifdef CONFIG_KEXEC
+/* workaround for a warning with -Wmissing-prototypes */
+void kexec_disable_iosapic(void);
+
 void
 kexec_disable_iosapic(void)
 {
diff --git a/arch/ia64/kernel/irq.c b/arch/ia64/kernel/irq.c
index 275b9ea58c64..dcb718560e62 100644
--- a/arch/ia64/kernel/irq.c
+++ b/arch/ia64/kernel/irq.c
@@ -125,6 +125,9 @@ static void migrate_irqs(void)
 	}
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+void fixup_irqs(void);
+
 void fixup_irqs(void)
 {
 	unsigned int irq;
diff --git a/arch/ia64/kernel/irq_ia64.c b/arch/ia64/kernel/irq_ia64.c
index 46e33c5cb53d..c94e0bec3d72 100644
--- a/arch/ia64/kernel/irq_ia64.c
+++ b/arch/ia64/kernel/irq_ia64.c
@@ -420,6 +420,10 @@ void destroy_irq(unsigned int irq)
 #	define IS_RESCHEDULE(vec)	(0)
 #	define IS_LOCAL_TLB_FLUSH(vec)	(0)
 #endif
+
+/* workaround for a warning with -Wmissing-prototypes */
+void ia64_handle_irq (ia64_vector vector, struct pt_regs *regs);
+
 /*
  * That's where the IVT branches when we get an external
  * interrupt. This branches to the correct hardware IRQ handler via
@@ -505,6 +509,10 @@ ia64_handle_irq (ia64_vector vector, struct pt_regs *regs)
 }
 
 #ifdef CONFIG_HOTPLUG_CPU
+
+/* workaround for a warning with -Wmissing-prototypes */
+void ia64_process_pending_intr(void);
+
 /*
  * This function emulates a interrupt processing when a cpu is about to be
  * brought down.
@@ -583,6 +591,9 @@ static irqreturn_t dummy_handler (int irq, void *dev_id)
 
 #endif
 
+/* workaround for a warning with -Wmissing-prototypes */
+void register_percpu_irq(ia64_vector vec, irq_handler_t handler, unsigned long flags, const char *name);
+
 void
 register_percpu_irq(ia64_vector vec, irq_handler_t handler, unsigned long flags,
 		    const char *name)
diff --git a/arch/ia64/kernel/kprobes.c b/arch/ia64/kernel/kprobes.c
index ca34e51e84b4..502ce72bb352 100644
--- a/arch/ia64/kernel/kprobes.c
+++ b/arch/ia64/kernel/kprobes.c
@@ -396,6 +396,9 @@ void __kretprobe_trampoline(void)
 {
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+int __kprobes trampoline_probe_handler(struct kprobe *p, struct pt_regs *regs);
+
 int __kprobes trampoline_probe_handler(struct kprobe *p, struct pt_regs *regs)
 {
 	regs->cr_iip = __kretprobe_trampoline_handler(regs, NULL);
diff --git a/arch/ia64/kernel/mca.c b/arch/ia64/kernel/mca.c
index 2671688d349a..0598760e7b1e 100644
--- a/arch/ia64/kernel/mca.c
+++ b/arch/ia64/kernel/mca.c
@@ -487,6 +487,12 @@ ia64_mca_log_sal_error_record(int sal_info_type)
 		ia64_sal_clear_state_info(sal_info_type);
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+int
+search_mca_table (const struct mca_table_entry *first,
+                const struct mca_table_entry *last,
+                unsigned long ip);
+
 /*
  * search_mca_table
  *  See if the MCA surfaced in an instruction range
@@ -592,6 +598,9 @@ ia64_mca_cpe_int_handler (int cpe_irq, void *arg)
 	return IRQ_HANDLED;
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+void ia64_mca_register_cpev (int cpev);
+
 /*
  * ia64_mca_register_cpev
  *
@@ -1260,6 +1269,11 @@ static void mca_insert_tr(u64 iord)
 	ia64_set_psr(psr);
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+void
+ia64_mca_handler(struct pt_regs *regs, struct switch_stack *sw,
+		 struct ia64_sal_os_state *sos);
+
 /*
  * ia64_mca_handler
  *
diff --git a/arch/ia64/kernel/mca_drv.c b/arch/ia64/kernel/mca_drv.c
index 23c203639a96..ebe2691db4b2 100644
--- a/arch/ia64/kernel/mca_drv.c
+++ b/arch/ia64/kernel/mca_drv.c
@@ -147,6 +147,9 @@ mca_page_isolate(unsigned long paddr)
 	return ISOLATE_OK;
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+void mca_handler_bh(unsigned long paddr, void *iip, unsigned long ipsr);
+
 /**
  * mca_hanlder_bh - Kill the process which occurred memory read error
  * @paddr:	poisoned address received from MCA Handler
@@ -765,6 +768,10 @@ mca_try_to_recover(void *rec, struct ia64_sal_os_state *sos)
  * =============================================================================
  */
 
+/* workaround for a warning with -Wmissing-prototypes */
+int __init mca_external_handler_init(void);
+void __exit mca_external_handler_exit(void);
+
 int __init mca_external_handler_init(void)
 {
 	if (init_record_index_pools())
diff --git a/arch/ia64/kernel/module.c b/arch/ia64/kernel/module.c
index 57f57943686b..1d314d31e7e8 100644
--- a/arch/ia64/kernel/module.c
+++ b/arch/ia64/kernel/module.c
@@ -241,6 +241,9 @@ patch_plt (struct module *mod, struct plt_entry *plt, long target_ip, unsigned l
 	return 0;
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+unsigned long plt_target (struct plt_entry *plt);
+
 unsigned long
 plt_target (struct plt_entry *plt)
 {
diff --git a/arch/ia64/kernel/process.c b/arch/ia64/kernel/process.c
index 9a5cd9fad3a9..c3cd40fa2215 100644
--- a/arch/ia64/kernel/process.c
+++ b/arch/ia64/kernel/process.c
@@ -151,6 +151,10 @@ show_regs (struct pt_regs *regs)
 		show_stack(NULL, NULL, KERN_DEFAULT);
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+void console_print(const char *s);
+void do_notify_resume_user(sigset_t *unused, struct sigscratch *scr, long in_syscall);
+
 /* local support for deprecated console_print */
 void
 console_print(const char *s)
@@ -402,6 +406,11 @@ copy_thread(struct task_struct *p, const struct kernel_clone_args *args)
 	return retval;
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+asmlinkage long ia64_clone(unsigned long clone_flags, unsigned long stack_start,
+			   unsigned long stack_size, unsigned long parent_tidptr,
+			   unsigned long child_tidptr, unsigned long tls);
+
 asmlinkage long ia64_clone(unsigned long clone_flags, unsigned long stack_start,
 			   unsigned long stack_size, unsigned long parent_tidptr,
 			   unsigned long child_tidptr, unsigned long tls)
@@ -555,6 +564,9 @@ __get_wchan (struct task_struct *p)
 	return 0;
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+void cpu_halt (void);
+
 void
 cpu_halt (void)
 {
diff --git a/arch/ia64/kernel/ptrace.c b/arch/ia64/kernel/ptrace.c
index 4c41912c550f..fd06d47edb73 100644
--- a/arch/ia64/kernel/ptrace.c
+++ b/arch/ia64/kernel/ptrace.c
@@ -1151,6 +1151,15 @@ arch_ptrace (struct task_struct *child, long request,
 	}
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+asmlinkage long
+syscall_trace_enter (long arg0, long arg1, long arg2, long arg3,
+		     long arg4, long arg5, long arg6, long arg7,
+		     struct pt_regs regs);
+asmlinkage void
+syscall_trace_leave (long arg0, long arg1, long arg2, long arg3,
+		     long arg4, long arg5, long arg6, long arg7,
+		     struct pt_regs regs);
 
 /* "asmlinkage" so the input arguments are preserved... */
 
diff --git a/arch/ia64/kernel/salinfo.c b/arch/ia64/kernel/salinfo.c
index 03b632c56899..981feaea92f4 100644
--- a/arch/ia64/kernel/salinfo.c
+++ b/arch/ia64/kernel/salinfo.c
@@ -197,6 +197,9 @@ shift1_data_saved (struct salinfo_data *data, int shift)
 	       sizeof(data->data_saved[0]));
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+void salinfo_log_wakeup(int type, u8 *buffer, u64 size, int irqsafe);
+
 /* This routine is invoked in interrupt context.  Note: mca.c enables
  * interrupts before calling this code for CMC/CPE.  MCA and INIT events are
  * not irq safe, do not call any routines that use spinlocks, they may deadlock.
diff --git a/arch/ia64/kernel/signal.c b/arch/ia64/kernel/signal.c
index 51cf6a7ec158..c4a7dd737ed4 100644
--- a/arch/ia64/kernel/signal.c
+++ b/arch/ia64/kernel/signal.c
@@ -104,6 +104,9 @@ restore_sigcontext (struct sigcontext __user *sc, struct sigscratch *scr)
 	return err;
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+long ia64_rt_sigreturn (struct sigscratch *scr);
+
 long
 ia64_rt_sigreturn (struct sigscratch *scr)
 {
diff --git a/arch/ia64/kernel/smpboot.c b/arch/ia64/kernel/smpboot.c
index d0e935cf2093..2c1dbcb54076 100644
--- a/arch/ia64/kernel/smpboot.c
+++ b/arch/ia64/kernel/smpboot.c
@@ -186,6 +186,9 @@ static void fix_b0_for_bsp(void)
 #endif
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+void sync_master (void *arg);
+
 void
 sync_master (void *arg)
 {
@@ -239,6 +242,9 @@ get_delta (long *rt, long *master)
 	return tcenter - best_tm;
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+void ia64_sync_itc (unsigned int master);
+
 /*
  * Synchronize ar.itc of the current (slave) CPU with the ar.itc of the MASTER CPU
  * (normally the time-keeper CPU).  We use a closed loop to eliminate the possibility of
@@ -427,6 +433,8 @@ smp_callin (void)
 	Dprintk("Stack on CPU %d at about %p\n",cpuid, &cpuid);
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+int start_secondary (void *unused);
 
 /*
  * Activate a secondary processor.  head.S calls this.
@@ -589,6 +597,9 @@ remove_siblinginfo(int cpu)
 
 extern void fixup_irqs(void);
 
+/* workaround for a warning with -Wmissing-prototypes */
+int migrate_platform_irqs(unsigned int cpu);
+
 int migrate_platform_irqs(unsigned int cpu)
 {
 	int new_cpei_cpu;
diff --git a/arch/ia64/kernel/sys_ia64.c b/arch/ia64/kernel/sys_ia64.c
index 6669514a0454..9f4a579fb437 100644
--- a/arch/ia64/kernel/sys_ia64.c
+++ b/arch/ia64/kernel/sys_ia64.c
@@ -67,6 +67,11 @@ arch_get_unmapped_area (struct file *filp, unsigned long addr, unsigned long len
 	return vm_unmapped_area(&info);
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+asmlinkage long ia64_getpriority (int which, int who);
+asmlinkage unsigned long sys_getpagesize (void);
+asmlinkage unsigned long ia64_brk (unsigned long brk);
+
 asmlinkage long
 ia64_getpriority (int which, int who)
 {
@@ -157,6 +162,13 @@ sys_mmap (unsigned long addr, unsigned long len, int prot, int flags, int fd, lo
 	return addr;
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+asmlinkage unsigned long
+ia64_mremap (unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags,
+	     unsigned long new_addr);
+asmlinkage long
+ia64_clock_getres(const clockid_t which_clock, struct __kernel_timespec __user *tp);
+
 asmlinkage unsigned long
 ia64_mremap (unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags,
 	     unsigned long new_addr)
diff --git a/arch/ia64/kernel/time.c b/arch/ia64/kernel/time.c
index 83ef044b63ef..082101e1b7eb 100644
--- a/arch/ia64/kernel/time.c
+++ b/arch/ia64/kernel/time.c
@@ -256,6 +256,8 @@ static int __init nojitter_setup(char *str)
 
 __setup("nojitter", nojitter_setup);
 
+/* workaround for a warning with -Wmissing-prototypes */
+void ia64_init_itm(void);
 
 void ia64_init_itm(void)
 {
diff --git a/arch/ia64/kernel/traps.c b/arch/ia64/kernel/traps.c
index 53735b1d1be3..7c1ee9e73785 100644
--- a/arch/ia64/kernel/traps.c
+++ b/arch/ia64/kernel/traps.c
@@ -31,6 +31,12 @@
 fpswa_interface_t *fpswa_interface;
 EXPORT_SYMBOL(fpswa_interface);
 
+/* workaround for a warning with -Wmissing-prototypes */
+void __init trap_init (void);
+int die (const char *str, struct pt_regs *regs, long err);
+int die_if_kernel (char *str, struct pt_regs *regs, long err);
+void __kprobes ia64_bad_break (unsigned long break_num, struct pt_regs *regs);
+
 void __init
 trap_init (void)
 {
@@ -383,6 +389,16 @@ struct illegal_op_return {
 	unsigned long fkt, arg1, arg2, arg3;
 };
 
+/* workaround for a warning with -Wmissing-prototypes */
+struct illegal_op_return
+ia64_illegal_op_fault (unsigned long ec, long arg1, long arg2, long arg3,
+		       long arg4, long arg5, long arg6, long arg7,
+		       struct pt_regs regs);
+void __kprobes
+ia64_fault (unsigned long vector, unsigned long isr, unsigned long ifa,
+	    unsigned long iim, unsigned long itir, long arg5, long arg6,
+	    long arg7, struct pt_regs regs);
+
 struct illegal_op_return
 ia64_illegal_op_fault (unsigned long ec, long arg1, long arg2, long arg3,
 		       long arg4, long arg5, long arg6, long arg7,
diff --git a/arch/ia64/kernel/unaligned.c b/arch/ia64/kernel/unaligned.c
index 9cc894b76661..03807762312f 100644
--- a/arch/ia64/kernel/unaligned.c
+++ b/arch/ia64/kernel/unaligned.c
@@ -1310,6 +1310,9 @@ emulate_store_float (unsigned long ifa, load_store_t ld, struct pt_regs *regs,
  */
 static DEFINE_RATELIMIT_STATE(logging_rate_limit, 5 * HZ, 5);
 
+/* workaround for a warning with -Wmissing-prototypes */
+void ia64_handle_unaligned (unsigned long ifa, struct pt_regs *regs);
+
 void
 ia64_handle_unaligned (unsigned long ifa, struct pt_regs *regs)
 {
diff --git a/arch/ia64/kernel/unwind.c b/arch/ia64/kernel/unwind.c
index 6bd64c35e691..44620c781ac9 100644
--- a/arch/ia64/kernel/unwind.c
+++ b/arch/ia64/kernel/unwind.c
@@ -2280,6 +2280,9 @@ unw_init (void)
 			  __start_unwind, __end_unwind);
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+asmlinkage long sys_getunwind (void __user *buf, size_t buf_size);
+
 /*
  * DEPRECATED DEPRECATED DEPRECATED DEPRECATED DEPRECATED DEPRECATED DEPRECATED
  *
diff --git a/arch/ia64/lib/checksum.c b/arch/ia64/lib/checksum.c
index d26517fe3500..6a2e8f9f0da9 100644
--- a/arch/ia64/lib/checksum.c
+++ b/arch/ia64/lib/checksum.c
@@ -30,6 +30,9 @@ from64to16 (unsigned long x)
 	return x;
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+__sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum);
+
 /*
  * computes the checksum of the TCP/UDP pseudo-header
  * returns a 16-bit checksum, already complemented.
@@ -45,6 +48,9 @@ csum_tcpudp_magic(__be32 saddr, __be32 daddr, __u32 len,
 
 EXPORT_SYMBOL(csum_tcpudp_magic);
 
+/* workaround for a warning with -Wmissing-prototypes */
+__wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum);
+
 __wsum
 csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len,
 		   __u8 proto, __wsum sum)
@@ -65,6 +71,9 @@ EXPORT_SYMBOL(csum_tcpudp_nofold);
 
 extern unsigned long do_csum (const unsigned char *, long);
 
+/* workaround for a warning with -Wmissing-prototypes */
+__wsum csum_partial(const void *buff, int len, __wsum sum);
+
 /*
  * computes the checksum of a memory block at buff, length len,
  * and adds in "sum" (32-bit)
@@ -90,6 +99,9 @@ __wsum csum_partial(const void *buff, int len, __wsum sum)
 
 EXPORT_SYMBOL(csum_partial);
 
+/* workaround for a warning with -Wmissing-prototypes */
+__sum16 ip_compute_csum (const void *buff, int len);
+
 /*
  * this routine is used for miscellaneous IP-like checksums, mainly
  * in icmp.c
diff --git a/arch/ia64/mm/discontig.c b/arch/ia64/mm/discontig.c
index 73d0db36edb6..c55f6e9b2c3a 100644
--- a/arch/ia64/mm/discontig.c
+++ b/arch/ia64/mm/discontig.c
@@ -608,6 +608,10 @@ void __init paging_init(void)
 	zero_page_memmap_ptr = virt_to_page(ia64_imva(empty_zero_page));
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+pg_data_t * __init arch_alloc_nodedata(int nid);
+void arch_refresh_nodedata(int update_node, pg_data_t *update_pgdat);
+
 pg_data_t * __init arch_alloc_nodedata(int nid)
 {
 	unsigned long size = compute_pernodesize(nid);
diff --git a/arch/ia64/mm/extable.c b/arch/ia64/mm/extable.c
index da477c11770b..0d795681df96 100644
--- a/arch/ia64/mm/extable.c
+++ b/arch/ia64/mm/extable.c
@@ -11,6 +11,9 @@
 #include <asm/errno.h>
 #include <asm/processor.h>
 
+/* workaround for a warning with -Wmissing-prototypes */
+void ia64_handle_exception (struct pt_regs *regs, const struct exception_table_entry *e);
+
 void
 ia64_handle_exception (struct pt_regs *regs, const struct exception_table_entry *e)
 {
diff --git a/arch/ia64/mm/fault.c b/arch/ia64/mm/fault.c
index 5458b52b4009..9024a29207b1 100644
--- a/arch/ia64/mm/fault.c
+++ b/arch/ia64/mm/fault.c
@@ -62,6 +62,9 @@ mapped_kernel_page_is_present (unsigned long address)
 #	define VM_WRITE_BIT	1
 #	define VM_EXEC_BIT	2
 
+/* workaround for a warning with -Wmissing-prototypes */
+void __kprobes ia64_do_page_fault (unsigned long address, unsigned long isr, struct pt_regs *regs);
+
 void __kprobes
 ia64_do_page_fault (unsigned long address, unsigned long isr, struct pt_regs *regs)
 {
diff --git a/arch/ia64/mm/hugetlbpage.c b/arch/ia64/mm/hugetlbpage.c
index 38de155d80c5..a6f8637f6a3f 100644
--- a/arch/ia64/mm/hugetlbpage.c
+++ b/arch/ia64/mm/hugetlbpage.c
@@ -91,6 +91,10 @@ int prepare_hugepage_range(struct file *file,
 	return 0;
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+int pmd_huge(pmd_t pmd);
+int pud_huge(pud_t pud);
+
 int pmd_huge(pmd_t pmd)
 {
 	return 0;
diff --git a/arch/ia64/mm/init.c b/arch/ia64/mm/init.c
index 05b0f2f0c073..902fcf3e2497 100644
--- a/arch/ia64/mm/init.c
+++ b/arch/ia64/mm/init.c
@@ -161,6 +161,9 @@ free_initmem (void)
 			   -1, "unused kernel");
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+void __init free_initrd_mem (unsigned long start, unsigned long end);
+
 void __init
 free_initrd_mem (unsigned long start, unsigned long end)
 {
@@ -310,6 +313,9 @@ int in_gate_area(struct mm_struct *mm, unsigned long addr)
 	return in_gate_area_no_mm(addr);
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+void ia64_mmu_init(void *my_cpu_data);
+
 void ia64_mmu_init(void *my_cpu_data)
 {
 	unsigned long pta, impl_va_bits;
diff --git a/arch/ia64/mm/tlb.c b/arch/ia64/mm/tlb.c
index ca060e7a2a46..678546bda139 100644
--- a/arch/ia64/mm/tlb.c
+++ b/arch/ia64/mm/tlb.c
@@ -366,6 +366,9 @@ void flush_tlb_range(struct vm_area_struct *vma,
 }
 EXPORT_SYMBOL(flush_tlb_range);
 
+/* workaround for a warning with -Wmissing-prototypes */
+void ia64_tlb_init(void);
+
 void ia64_tlb_init(void)
 {
 	ia64_ptce_info_t ptce_info;
diff --git a/arch/ia64/pci/pci.c b/arch/ia64/pci/pci.c
index 0a0328e61bef..1e28bf4db18f 100644
--- a/arch/ia64/pci/pci.c
+++ b/arch/ia64/pci/pci.c
@@ -323,6 +323,9 @@ int pcibios_root_bridge_prepare(struct pci_host_bridge *bridge)
 	return 0;
 }
 
+/* workaround for a warning with -Wmissing-prototypes */
+void pcibios_fixup_device_resources(struct pci_dev *dev);
+
 void pcibios_fixup_device_resources(struct pci_dev *dev)
 {
 	int idx;
-- 
2.25.1

