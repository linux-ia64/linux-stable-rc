From b419167d8f5d193f3fcbee3b2136ac22e91b80ea Mon Sep 17 00:00:00 2001
From: Tomas Glozar <tglozar@gmail.com>
Date: Fri, 27 Oct 2023 13:11:55 +0200
Subject: [PATCH 04/70] Revert "kernel: Drop IA64 support from sig_fault
 handlers"

This reverts commit f5e836884d8e55b416dfad55c29481ec1b65c1f0.
---
 include/linux/sched/signal.h       | 17 +++++++++++++----
 include/uapi/asm-generic/siginfo.h |  5 +++++
 kernel/signal.c                    | 25 ++++++++++++++++++++-----
 3 files changed, 38 insertions(+), 9 deletions(-)

diff --git a/include/linux/sched/signal.h b/include/linux/sched/signal.h
index 1ef1edbaaf79..b734b1533335 100644
--- a/include/linux/sched/signal.h
+++ b/include/linux/sched/signal.h
@@ -305,11 +305,20 @@ static inline void kernel_signal_stop(void)
 
 	schedule();
 }
+#ifdef __ia64__
+# define ___ARCH_SI_IA64(_a1, _a2, _a3) , _a1, _a2, _a3
+#else
+# define ___ARCH_SI_IA64(_a1, _a2, _a3)
+#endif
 
-int force_sig_fault_to_task(int sig, int code, void __user *addr,
-			    struct task_struct *t);
-int force_sig_fault(int sig, int code, void __user *addr);
-int send_sig_fault(int sig, int code, void __user *addr, struct task_struct *t);
+int force_sig_fault_to_task(int sig, int code, void __user *addr
+	___ARCH_SI_IA64(int imm, unsigned int flags, unsigned long isr)
+	, struct task_struct *t);
+int force_sig_fault(int sig, int code, void __user *addr
+	___ARCH_SI_IA64(int imm, unsigned int flags, unsigned long isr));
+int send_sig_fault(int sig, int code, void __user *addr
+	___ARCH_SI_IA64(int imm, unsigned int flags, unsigned long isr)
+	, struct task_struct *t);
 
 int force_sig_mceerr(int code, void __user *, short);
 int send_sig_mceerr(int code, void __user *, short, struct task_struct *);
diff --git a/include/uapi/asm-generic/siginfo.h b/include/uapi/asm-generic/siginfo.h
index 5a1ca43b5fc6..013f2c5ccae6 100644
--- a/include/uapi/asm-generic/siginfo.h
+++ b/include/uapi/asm-generic/siginfo.h
@@ -68,6 +68,11 @@ union __sifields {
 	/* SIGILL, SIGFPE, SIGSEGV, SIGBUS, SIGTRAP, SIGEMT */
 	struct {
 		void __user *_addr; /* faulting insn/memory ref. */
+#ifdef __ia64__
+		int _imm;		/* immediate value for "break" */
+		unsigned int _flags;	/* see ia64 si_flags */
+		unsigned long _isr;	/* isr */
+#endif
 
 #define __ADDR_BND_PKEY_PAD  (__alignof__(void *) < sizeof(short) ? \
 			      sizeof(short) : __alignof__(void *))
diff --git a/kernel/signal.c b/kernel/signal.c
index f8859faa26c5..3e25203dd977 100644
--- a/kernel/signal.c
+++ b/kernel/signal.c
@@ -1686,8 +1686,9 @@ void force_sigsegv(int sig)
 		force_sig(SIGSEGV);
 }
 
-int force_sig_fault_to_task(int sig, int code, void __user *addr,
-			    struct task_struct *t)
+int force_sig_fault_to_task(int sig, int code, void __user *addr
+	___ARCH_SI_IA64(int imm, unsigned int flags, unsigned long isr)
+	, struct task_struct *t)
 {
 	struct kernel_siginfo info;
 
@@ -1696,15 +1697,24 @@ int force_sig_fault_to_task(int sig, int code, void __user *addr,
 	info.si_errno = 0;
 	info.si_code  = code;
 	info.si_addr  = addr;
+#ifdef __ia64__
+	info.si_imm = imm;
+	info.si_flags = flags;
+	info.si_isr = isr;
+#endif
 	return force_sig_info_to_task(&info, t, HANDLER_CURRENT);
 }
 
-int force_sig_fault(int sig, int code, void __user *addr)
+int force_sig_fault(int sig, int code, void __user *addr
+	___ARCH_SI_IA64(int imm, unsigned int flags, unsigned long isr))
 {
-	return force_sig_fault_to_task(sig, code, addr, current);
+	return force_sig_fault_to_task(sig, code, addr
+				       ___ARCH_SI_IA64(imm, flags, isr), current);
 }
 
-int send_sig_fault(int sig, int code, void __user *addr, struct task_struct *t)
+int send_sig_fault(int sig, int code, void __user *addr
+	___ARCH_SI_IA64(int imm, unsigned int flags, unsigned long isr)
+	, struct task_struct *t)
 {
 	struct kernel_siginfo info;
 
@@ -1713,6 +1723,11 @@ int send_sig_fault(int sig, int code, void __user *addr, struct task_struct *t)
 	info.si_errno = 0;
 	info.si_code  = code;
 	info.si_addr  = addr;
+#ifdef __ia64__
+	info.si_imm = imm;
+	info.si_flags = flags;
+	info.si_isr = isr;
+#endif
 	return send_sig_info(info.si_signo, &info, t);
 }
 
-- 
2.25.1

