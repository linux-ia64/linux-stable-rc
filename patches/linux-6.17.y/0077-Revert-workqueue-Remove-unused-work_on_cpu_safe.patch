From ad769b3c628216ac9b876611e6de4ab3f5da5dcb Mon Sep 17 00:00:00 2001
From: Johnny Mnemonic <jm@machine-hall.org>
Date: Fri, 1 Aug 2025 16:36:28 +0200
Subject: [PATCH 77/90] Revert "workqueue: Remove unused work_on_cpu_safe"

ia64 is still using this in `arch/ia64/kernel/salinfo.c`, so we keep that.

Otherwise we get:

```
arch/ia64/kernel/salinfo.c: In function 'salinfo_log_new_read':
arch/ia64/kernel/salinfo.c:427:17: error: implicit declaration of function 'work_on_cpu_safe'; did you mean 'work_on_cpu_key'? [-Wimplicit-function-declaration]
  427 |                 work_on_cpu_safe(cpu, salinfo_log_read_cpu, data);
      |                 ^~~~~~~~~~~~~~~~
      |                 work_on_cpu_key
```

...during build.

This reverts commit fc2898ea793a48bc4b74b61cde2d8656f20efdf4.
---
 include/linux/workqueue.h | 13 +++++++++++++
 kernel/workqueue.c        | 25 +++++++++++++++++++++++++
 2 files changed, 38 insertions(+)

diff --git a/include/linux/workqueue.h b/include/linux/workqueue.h
index 45d5dd470ff6..83d158bb2791 100644
--- a/include/linux/workqueue.h
+++ b/include/linux/workqueue.h
@@ -847,6 +847,19 @@ long work_on_cpu_key(int cpu, long (*fn)(void *),
 	work_on_cpu_key(_cpu, _fn, _arg, &__key);	\
 })
 
+long work_on_cpu_safe_key(int cpu, long (*fn)(void *),
+			  void *arg, struct lock_class_key *key);
+
+/*
+ * A new key is defined for each caller to make sure the work
+ * associated with the function doesn't share its locking class.
+ */
+#define work_on_cpu_safe(_cpu, _fn, _arg)		\
+({							\
+	static struct lock_class_key __key;		\
+							\
+	work_on_cpu_safe_key(_cpu, _fn, _arg, &__key);	\
+})
 #endif /* CONFIG_SMP */
 
 #ifdef CONFIG_FREEZER
diff --git a/kernel/workqueue.c b/kernel/workqueue.c
index c6b79b3675c3..7a6345b7f3a6 100644
--- a/kernel/workqueue.c
+++ b/kernel/workqueue.c
@@ -6768,6 +6768,31 @@ long work_on_cpu_key(int cpu, long (*fn)(void *),
 	return wfc.ret;
 }
 EXPORT_SYMBOL_GPL(work_on_cpu_key);
+
+/**
+ * work_on_cpu_safe_key - run a function in thread context on a particular cpu
+ * @cpu: the cpu to run on
+ * @fn:  the function to run
+ * @arg: the function argument
+ * @key: The lock class key for lock debugging purposes
+ *
+ * Disables CPU hotplug and calls work_on_cpu(). The caller must not hold
+ * any locks which would prevent @fn from completing.
+ *
+ * Return: The value @fn returns.
+ */
+long work_on_cpu_safe_key(int cpu, long (*fn)(void *),
+			  void *arg, struct lock_class_key *key)
+{
+	long ret = -ENODEV;
+
+	cpus_read_lock();
+	if (cpu_online(cpu))
+		ret = work_on_cpu_key(cpu, fn, arg, key);
+	cpus_read_unlock();
+	return ret;
+}
+EXPORT_SYMBOL_GPL(work_on_cpu_safe_key);
 #endif /* CONFIG_SMP */
 
 #ifdef CONFIG_FREEZER
-- 
2.25.1

