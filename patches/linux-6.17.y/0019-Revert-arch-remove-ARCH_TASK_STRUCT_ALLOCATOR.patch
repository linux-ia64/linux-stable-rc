From 29c1ea1107ebfc3b3401f2b3d65bce4d0743f8d6 Mon Sep 17 00:00:00 2001
From: Tomas Glozar <tglozar@gmail.com>
Date: Thu, 11 Jan 2024 16:45:16 +0100
Subject: [PATCH 19/90] Revert "arch: remove ARCH_TASK_STRUCT_ALLOCATOR"

This reverts commit 3888750e21ccb909051c810cc79fcc0650a740f8.
---
 arch/Kconfig  | 9 +++++++++
 kernel/fork.c | 4 ++++
 2 files changed, 13 insertions(+)

diff --git a/arch/Kconfig b/arch/Kconfig
index d692f46b69f8..0eaabcca8f0b 100644
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@ -333,8 +333,17 @@ config ARCH_HAS_CPU_PASID
 	bool
 	select IOMMU_MM_DATA
 
+# Select if arch init_task must go in the __init_task_data section
+config ARCH_TASK_STRUCT_ON_STACK
+	bool
+
+# Select if arch has its private alloc_task_struct() function
+config ARCH_TASK_STRUCT_ALLOCATOR
+	bool
+
 config HAVE_ARCH_THREAD_STRUCT_WHITELIST
 	bool
+	depends on !ARCH_TASK_STRUCT_ALLOCATOR
 	help
 	  An architecture should select this to provide hardened usercopy
 	  knowledge about what region of the thread_struct should be
diff --git a/kernel/fork.c b/kernel/fork.c
index 962b8af2d7da..27acd5682dc3 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -809,6 +809,7 @@ static void __init set_max_threads(unsigned int max_threads_suggested)
 int arch_task_struct_size __read_mostly;
 #endif
 
+#ifndef CONFIG_ARCH_TASK_STRUCT_ALLOCATOR
 static void __init task_struct_whitelist(unsigned long *offset, unsigned long *size)
 {
 	/* Fetch thread_struct whitelist for the architecture. */
@@ -823,10 +824,12 @@ static void __init task_struct_whitelist(unsigned long *offset, unsigned long *s
 	else
 		*offset += offsetof(struct task_struct, thread);
 }
+#endif /* CONFIG_ARCH_TASK_STRUCT_ALLOCATOR */
 
 void __init fork_init(void)
 {
 	int i;
+#ifndef CONFIG_ARCH_TASK_STRUCT_ALLOCATOR
 #ifndef ARCH_MIN_TASKALIGN
 #define ARCH_MIN_TASKALIGN	0
 #endif
@@ -839,6 +842,7 @@ void __init fork_init(void)
 			arch_task_struct_size, align,
 			SLAB_PANIC|SLAB_ACCOUNT,
 			useroffset, usersize, NULL);
+#endif
 
 	/* do the arch specific task caches init */
 	arch_task_cache_init();
-- 
2.25.1

