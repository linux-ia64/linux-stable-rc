From 0fd4fe0e2c34094150c0b9bfa6ce736d7a9d915c Mon Sep 17 00:00:00 2001
From: Johnny Mnemonic <jm@machine-hall.org>
Date: Thu, 5 Jun 2025 16:07:17 +0200
Subject: [PATCH 73/90] ia64: replay "syscall.h: add syscall_set_arguments()"

See 17fc7b8f9bce5d3d61ef347dd8cfccb6365dcaa1.

This replay is actually a revert of the ia64 part of "arch: remove unused
function syscall_set_arguments()", i.e. 7962c2eddbfe7cce879acb06f9b4f205789e57b7.
Thankfully the replayed commit had a reference to that one.
---
 arch/ia64/include/asm/syscall.h | 18 ++++++++++++++++--
 arch/ia64/kernel/ptrace.c       | 31 +++++++++++++++++++------------
 2 files changed, 35 insertions(+), 14 deletions(-)

diff --git a/arch/ia64/include/asm/syscall.h b/arch/ia64/include/asm/syscall.h
index 3bb4af736d5a..fcbf54c1b8a1 100644
--- a/arch/ia64/include/asm/syscall.h
+++ b/arch/ia64/include/asm/syscall.h
@@ -63,8 +63,22 @@ static inline void syscall_set_return_value(struct task_struct *task,
 	}
 }
 
-extern void syscall_get_arguments(struct task_struct *task,
-	struct pt_regs *regs, unsigned long *args);
+extern void ia64_syscall_get_set_arguments(struct task_struct *task,
+	struct pt_regs *regs, unsigned long *args, int rw);
+
+static inline void syscall_get_arguments(struct task_struct *task,
+					 struct pt_regs *regs,
+					 unsigned long *args)
+{
+	ia64_syscall_get_set_arguments(task, regs, args, 0);
+}
+
+static inline void syscall_set_arguments(struct task_struct *task,
+					 struct pt_regs *regs,
+					 unsigned long *args)
+{
+	ia64_syscall_get_set_arguments(task, regs, args, 1);
+}
 
 static inline int syscall_get_arch(struct task_struct *task)
 {
diff --git a/arch/ia64/kernel/ptrace.c b/arch/ia64/kernel/ptrace.c
index fd06d47edb73..e85e5c8bd466 100644
--- a/arch/ia64/kernel/ptrace.c
+++ b/arch/ia64/kernel/ptrace.c
@@ -1951,16 +1951,17 @@ const struct user_regset_view *task_user_regset_view(struct task_struct *tsk)
 	return &user_ia64_view;
 }
 
-struct syscall_get_args {
+struct syscall_get_set_args {
 	unsigned int i;
 	unsigned int n;
 	unsigned long *args;
 	struct pt_regs *regs;
+	int rw;
 };
 
-static void syscall_get_args_cb(struct unw_frame_info *info, void *data)
+static void syscall_get_set_args_cb(struct unw_frame_info *info, void *data)
 {
-	struct syscall_get_args *args = data;
+	struct syscall_get_set_args *args = data;
 	struct pt_regs *pt = args->regs;
 	unsigned long *krbs, cfm, ndirty, nlocals, nouts;
 	int i, count;
@@ -1991,31 +1992,37 @@ static void syscall_get_args_cb(struct unw_frame_info *info, void *data)
 	/* Iterate over outs. */
 	for (i = 0; i < count; i++) {
 		int j = ndirty + nlocals + i + args->i;
-		args->args[i] = *ia64_rse_skip_regs(krbs, j);
+		if (args->rw)
+			*ia64_rse_skip_regs(krbs, j) = args->args[i];
+		else
+			args->args[i] = *ia64_rse_skip_regs(krbs, j);
 	}
 
-	while (i < args->n) {
-		args->args[i] = 0;
-		i++;
+	if (!args->rw) {
+		while (i < args->n) {
+			args->args[i] = 0;
+			i++;
+		}
 	}
 }
 
-void syscall_get_arguments(struct task_struct *task,
-	struct pt_regs *regs, unsigned long *args)
+void ia64_syscall_get_set_arguments(struct task_struct *task,
+	struct pt_regs *regs, unsigned long *args, int rw)
 {
-	struct syscall_get_args data = {
+	struct syscall_get_set_args data = {
 		.i = 0,
 		.n = 6,
 		.args = args,
 		.regs = regs,
+		.rw = rw,
 	};
 
 	if (task == current)
-		unw_init_running(syscall_get_args_cb, &data);
+		unw_init_running(syscall_get_set_args_cb, &data);
 	else {
 		struct unw_frame_info ufi;
 		memset(&ufi, 0, sizeof(ufi));
 		unw_init_from_blocked_task(&ufi, task);
-		syscall_get_args_cb(&ufi, &data);
+		syscall_get_set_args_cb(&ufi, &data);
 	}
 }
-- 
2.25.1

